transitions:
  # ─── initial resolve split ─────────────────────────────────
  resolver_branch:
    exact:    flight_access_switch
    multiple: multiple_match_handler_switch # Route to new switch for handling multiple matches
    none:     username_type_switch

  # ─── EXACT branch (account exists) ────────────────────────
  flight_access_switch:
    "yes": first_login_switch
    "no":  non_flight_login_method_switch

  first_login_switch:
    "yes": login_method_first_switch
    "no":  login_method_returning_switch

  # ─── FIRST-LOGIN flights → temp-password flow ─────────────
  login_method_first_switch:
    sso:      flight_sso_subflow
    password: flight_password_first_login_subflow

  # ─── RETURNING flights → standard password screen ──────────
  login_method_returning_switch:
    sso:      flight_sso_subflow
    password: flight_password_returning_subflow

  # ─── Non-Flight → account creation screen ──────────
  non_flight_login_method_switch:
    #sso:      flight_sso_subflow
    password: non_flight_first_login_switch

  # ─── NON-FLIGHT password  →  first-login? -------------------
  non_flight_first_login_switch:
    "yes":  non_flight_account_creation_subflow  # account-creation flow
    "no":   flight_password_returning_subflow    # normal returning pwd flow

  # ─── NEW: Handle multiple matches intelligently ─────────────
  multiple_match_handler_switch:
    "true": NameDeduplicationView # If came from org picker, user needs to de-duplicate
    "false": OrganizationPickerView # Otherwise, it's the first time, show the org picker
    null: OrganizationPickerView # CORRECTED: Default case for when context is not set

  # ─── MULTIPLE branch (user picks an org) ──────────────────
  OrganizationPickerView:
    organizationSelected:
      target: resolveUsernameAction
      set_context:
        came_from_org_picker: "true"

  # ─── NONE branch (help the user) ──────────────────────────
  username_type_switch:
    email:      domain_flight_access_switch
    employeeid:
      target: OrganizationPickerView
      set_context:
        show_username_on_picker: true

  domain_flight_access_switch:
    "yes": flight_access_after_domain_switch
    "no":  check_came_from_org_picker_switch # Modified: go to the new switch

  check_came_from_org_picker_switch: # New switch transitions
    "true":
      target: OrganizationPickerView
      error_id: AUTH_0030 # Specific error for this case
      set_context:
        show_username_on_picker: true # Ensure picker UI is correct
    "false": # Default or not set (or explicitly "false")
      target: UsernameEntryView
      error_id: AUTH_0004 # Original error

  flight_access_after_domain_switch:
    "yes":
      target: OrganizationPickerView
      set_context:
        show_username_on_picker: true
    "no":  non_flight_account_creation_subflow # non-flight → create account

  # ─── Credential verification (action) ─────────────────────
  verifyTempPasswordAction:
    success:          SetupPasswordView
    invalidPassword: { target: TempPasswordEntryView, error_id: AUTH_0013 }
    accountLocked:   { target: TempPasswordEntryView, error_id: AUTH_0014 }
    forgotPassword:  forgotPw_subflow

  verifyPasswordAction:
    success:          LoggedInView
    invalidPassword: { target: PasswordEntryView, error_id: AUTH_0005 }
    accountLocked:   { target: PasswordEntryView, error_id: AUTH_0006 }
    forgotPassword:  forgotPw_subflow

  resolveUsernameAction:
    exact:    resolver_branch
    multiple: resolver_branch # This will be routed by multiple_match_handler_switch
    # first‐time "none" still just shows the prompt (no error)
    none:
      target: OrganizationPickerView
      set_context:
        show_username_on_picker: true
    # on a retry failure, stay on the prompt with an error code
    error:
      target: OrganizationPickerView
      set_context:
        show_username_on_picker: true
      error_id: AUTH_0015

  deduplicateNameAction:
    exact: resolver_branch # On success, go back to the main branch to find the exact path
    none:
      target: NameDeduplicationView
      error_id: AUTH_0017 # On failure, stay on the view and show an error

  initiateSSOAction:
    success: SSORedirectView
    failure: PasswordEntryView

  logLoginAttemptAction:
    logged: LoggedInView
  
  # ─── Specific to new account setup emails ─────────────────────────
  sendPasswordEmailLinkAction:
    success: PasswordEmailLinkView # Transition to the view confirming email was sent
    error: { target: PasswordEmailLinkView, error_id: AUTH_0008 } # Or another appropriate error view

  # ─── Specific to forgot password flow ─────────────────────────
  sendResetEmailAction:
    success: ForgotPasswordEmailLinkView # Transition to the view confirming email was sent
    error: { target: ForgotPasswordEmailLinkView, error_id: AUTH_0009, set_context: { prompt_check_email: false } }

  # Action to verify the password reset token from the email link
  resolvePasswordResetTokenAction:
    valid:
      target: UpdatePasswordView
      set_context:
        token_is_valid: true
        prompt_check_email: false
    invalid:
      target: UpdatePasswordView # Or could be ForgotPasswordEmailLinkView with error
      set_context:
        token_is_valid: false
        prompt_check_email: false
      error_id: AUTH_0019
    expired:
      target: UpdatePasswordView # Or could be ForgotPasswordEmailLinkView with error
      set_context:
        token_is_valid: false
        prompt_check_email: false
      error_id: AUTH_0020

  # Action to verify the password setup token from the email link
  resolvePasswordSetupTokenAction:
    valid:
      target: SetupPasswordView
      set_context:
        token_is_valid: true
        prompt_check_email: false
    invalid:
      target: SetupPasswordView # Or could be PasswordEmailLinkView with error
      set_context:
        token_is_valid: false
        prompt_check_email: false
      error_id: AUTH_0021
    expired:
      target: SetupPasswordView # Or could be PasswordEmailLinkView with error
      set_context:
        token_is_valid: false
        prompt_check_email: false
      error_id: AUTH_0022

  # Section for createPasswordAction
  createPasswordAction:
    success: LoggedInView
    failure: { target: SetupPasswordView, error_id: AUTH_0023 }
    weakPassword:
      target: SetupPasswordView
      error_id: AUTH_0025

  # Section for updatePasswordAction
  updatePasswordAction:
    success: LoggedInView
    failure: { target: UpdatePasswordView, error_id: AUTH_0024 }
    weakPassword:
      target: UpdatePasswordView
      error_id: AUTH_0025

  # ─── Global events ──────────────────────────────────────────
  sessionExpired:
    target: UsernameEntryView
    error_id: AUTH_0003

  # ─── View transitions (explicit events) ────────────────────
  UsernameEntryView:
    submitUsername: resolveUsernameAction

  NameDeduplicationView:
    submitName: deduplicateNameAction

  PasswordEntryView:
    submitPassword: verifyPasswordAction
    forgotPassword: forgotPw_subflow

  TempPasswordEntryView:
    submitPassword: verifyTempPasswordAction

  SSORedirectView:
    continue:  LoggedInView                                             # IdP success
    failure:   { target: UsernameEntryView, error_id: AUTH_0012 }    # IdP sent error
    cancelled: { target: UsernameEntryView, error_id: AUTH_0011 }   # user closed the window

  ForgotPasswordEmailLinkView:
    resendEmail: sendResetEmailAction # Only allows resending the email
    # No other transitions from here; user action is external (clicking email link)

  PasswordEmailLinkView:
    resendEmail: sendPasswordEmailLinkAction # Only allows resending the email
    # No 'passwordEmailLinkSuccess' event leading to SetupPasswordView anymore.
    # User action is external (clicking email link)

  SetupPasswordView:
    processToken: resolvePasswordSetupTokenAction # Frontend triggers this if token in URL
    createPassword: createPasswordAction

  UpdatePasswordView:
    processToken: resolvePasswordResetTokenAction # Frontend triggers this if token in URL
    updatePassword: updatePasswordAction
    skip: LoggedInView