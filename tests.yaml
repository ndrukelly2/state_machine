tests:
  ###############################################################
  # ===  SECTION 1 : resolver_match == exact                 ===
  ###############################################################

  # ---------- EXACT → flight org • first-login pwd ----
  - id: EXACT_FL_FIRST_PASS_E
    description: "Initial | Exact match. Context |Flight access, First login, Password auth, Email identifier."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "yes"
      login_method: password
      identifier_type: email
    events:
      - submitPassword      # TempPasswordView → createPasswordAction
      - success             # verifyPasswordAction → SetupPasswordView  
      - createPassword      # SetupPasswordView → createPasswordAction
      - success             # createPasswordAction → LoggedInView
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

  # ---------- EXACT → flight org • first-login sso ----
  - id: EXACT_FL_FIRST_SSO_E
    description: "Initial | Exact match. Context |Flight access, First login, SSO auth, Email identifier."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "yes"
      login_method: sso
      identifier_type: email
    events:
      - success # initiateSSOAction → SSORedirectView → LoggedInView
    final_state: {"state_id": "SSORedirectView", "interface": "SSORedirectUI"}

  # ---------- EXACT → flight org • returning pwd ----
  - id: EXACT_FL_RET_PASS_E
    description: "Initial | Exact match. Context |Flight access, Returning user, Password auth, Email identifier."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: password
      identifier_type: email
    events:
      - submitPassword     # PasswordEntryView → verifyPasswordAction
      - success             # verifyPasswordAction → LoggedInView
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

  # ---------- EXACT → non-flight org • returning pwd ----
  - id: EXACT_NFL_RET_PASS_E
    description: "Initial | Exact match. Context |Non-flight access, Returning user, Password auth, Email identifier."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "no"
      first_login: "no"
      login_method: password
      identifier_type: email
    events:
      - submitPassword    # PasswordEntryView → verifyPasswordAction
      - success            # verifyPasswordAction → LoggedInView
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

  # ---------- EXACT → flight org • returning sso ----
  - id: EXACT_FL_RET_SSO_E
    description: "Initial | Exact match. Context |Flight access, Returning user, SSO auth, Email identifier."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: sso
      identifier_type: email
    events:
      - success         # initiateSSOAction → SSORedirectView → LoggedInView
    final_state: {"state_id": "SSORedirectView", "interface": "SSORedirectUI"}

  # ---------- EXACT → flight org • first-login sso (EmployeeID) ----
  - id: EXACT_FL_FIRST_SSO_ID
    description: "Initial | Exact match. Context |Flight access, First login, SSO auth, EmployeeID identifier."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "yes"
      login_method: sso
      identifier_type: employeeid
    events:
      - success     # initiateSSOAction → SSORedirectView → LoggedInView
    final_state: {"state_id": "SSORedirectView", "interface": "SSORedirectUI"}

  # ---------- EXACT → flight org • returning pwd (EmployeeID) ----
  - id: EXACT_FL_RET_PASS_ID
    description: "Initial | Exact match. Context |Flight access, Returning user, Password auth, EmployeeID identifier."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: password
      identifier_type: employeeid
    events:            
      - submitPassword         # PasswordEntryView → verifyPasswordAction
      - success                 # verifyPasswordAction → LoggedInView 
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

  # ---------- EXACT → flight org • first-login pwd (EmployeeID) ----
  - id: EXACT_FL_FIRST_PASS_ID
    description: "Initial | Exact match. Context |Flight access, First login, Password auth, EmployeeID identifier."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "yes"
      login_method: password
      identifier_type: employeeid
    events:
      - submitPassword       # TempPasswordView → createPasswordAction
      - success               # verifyPasswordAction → SetupPasswordView
      - createPassword      # SetupPasswordView → createPasswordAction
      - success             # createPasswordAction → LoggedInView
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

  # ---------- EXACT → flight org • returning sso (EmployeeID) ----
  - id: EXACT_FL_RET_SSO_ID
    description: "Initial | Exact match. Context |Flight access, Returning user, SSO auth, EmployeeID identifier."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: sso
      identifier_type: employeeid
    events:
      - success     # initiateSSOAction → SSORedirectView → LoggedInView
    final_state: {"state_id": "SSORedirectView", "interface": "SSORedirectUI"}

  # ---------- EXACT → flight org • returning password (email) | forgot password ----
  - id: EXACT_FL_RET_PASS_E_FORGOT_PW
    description: "Initial | Exact match. Context |Flight access, Returning user, password auth, email identifier, forgot password"
    initial_state: resolver_branch
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: password
      identifier_type: email
    events:
      - forgotPassword                      # PasswordEntryView → ForgotPasswordEmailLinkView
      - success
    final_state: {"state_id": "ForgotPasswordEmailLinkView", "interface": "forgotPasswordEmailLinkUI"}

  - id: EXACT_FL_RET_PASS_E_FORGOT_PW_TOKEN_LANDING
    description: "Initial | Exact match. Context |Flight access, Returning user, password auth, email identifier, forgot password, token landing"
    initial_state: UpdatePasswordView
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: password
      identifier_type: email
    events:
      # Event 1: Frontend detects token, state machine is in UpdatePasswordView, processToken is dispatched
      - processToken        # UpdatePasswordView → resolvePasswordResetTokenAction
      # Event 2: Token validation is successful
      - valid               # resolvePasswordResetTokenAction → UpdatePasswordView (context: token_is_valid=true)
      # Event 3: User submits new password
      - updatePassword      # UpdatePasswordView → updatePasswordAction
      # Event 4: Password update is successful
      - success             # updatePasswordAction → LoggedInView 
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

 # # # ---------- EXACT → flight org • returning password (email) | forgot password ----
 # # - id: EXACT_FL_RET_PASS_E_FORGOT_PW_EMPLOYEEID
 # #   description: "Initial | Exact match. Context |Flight access, Returning user, password auth, employeeID identifier, forgot password"
 # #   context:
 # #     resolver_match: exact
 # #     flight_access: "yes"
 # #     first_login: "no"
 # #     login_method: password
 # #     identifier_type: employeeid
 # #   events:
 # #     - forgotPassword                      # PasswordEntryView → ForgotPasswordEmailLinkView
 # #     - forgotPasswordEmailLinkSuccess      # ForgotPasswordEmailLinkView → UpdatePasswordView
 # #     - processToken                        # UpdatePasswordView (frontend detects token from URL) → resolvePasswordResetTokenAction
 # #     - valid                               # resolvePasswordResetTokenAction → UpdatePasswordView (UI shows password fields, token is valid)
 # #     - updatePassword                      # UpdatePasswordView → UpdatePasswordAction
 # #     - success                             # UpdatePasswordAction → LoggedInView

  # ------------------------------------------------------------#
  # -------------------- Error States --------------------------#
  # ------------------------------------------------------------#

  # ---------- EXACT → flight org • first-login pwd [Error] ----
  - id: EXACT_FL_FIRST_PASS_E_ERROR
    description: "Initial | Exact match. Context |Flight access, First login, Password auth, Email identifier [Error]."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "yes"
      login_method: password
      identifier_type: email
    events:
      - submitPassword     # TempPasswordView → createPasswordAction
      - invalidPassword    # verifyPasswordAction → SetupPasswordView  
    final_state: {"state_id": "TempPasswordEntryView", "interface": "tempPasswordEntryUI", "error_id": "AUTH_0013", "cs_contact": true}

  # ---------- EXACT → flight org • first-login pwd [Error] ----
  - id: EXACT_FL_PASS_E_ERROR_ACCOUNT_LOCKED
    description: "Initial | Exact match. Context |Flight access, Password auth, Email identifier [Error, Account Locked]."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: password
      identifier_type: email
    events:
      - submitPassword      # PasswordEntryView → verifyPasswordAction
      - accountLocked       # verifyPasswordAction → PasswordEntryView
    final_state: {"state_id": "PasswordEntryView", "interface": "passwordEntryUI", "error_id": "AUTH_0006"}

  # ---------- EXACT → flight org • first-login sso [Error] ----
  - id: EXACT_FL_FIRST_SSO_E_ERROR
    description: "Initial | Exact match. Context |Flight access, First login, SSO auth, Email identifier [Error]."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "yes"
      login_method: sso
      identifier_type: email
    events:
      - success     # initiateSSOAction → SSORedirectView
      - failure     # SSORedirectView → UsernameEntryView [Error]
    final_state: {"state_id": "UsernameEntryView", "interface": "usernameEntryUI", "error_id": "AUTH_0012"}

  # ---------- EXACT → flight org • returning pwd [Error] ----
  - id: EXACT_FL_RET_PASS_E_ERROR
    description: "Initial | Exact match. Context |Flight access, Returning user, Password auth, Email identifier [Error]"
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: password
      identifier_type: email
    events:
      - submitPassword      # PasswordEntryView → verifyPasswordAction
      - invalidPassword    # verifyPasswordAction → PasswordEntryView
    final_state: {"state_id": "PasswordEntryView", "interface": "passwordEntryUI", "error_id": "AUTH_0005"}

  # ---------- EXACT → non-flight org • returning pwd [Error] ----
  - id: EXACT_NFL_RET_PASS_E_ERROR
    description: "Initial | Exact match. Context |Non-flight access, Returning user, Password auth, Email identifier [Error]"
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "no"
      first_login: "no"
      login_method: password
      identifier_type: email
    events:
      - submitPassword      # PasswordEntryView → verifyPasswordAction
      - invalidPassword    # verifyPasswordAction → PasswordEntryView
    final_state: {"state_id": "PasswordEntryView", "interface": "passwordEntryUI", "error_id": "AUTH_0005"}

  # ---------- EXACT → flight org • returning sso [Error] (Does this have an error?)  ----
  - id: EXACT_FL_RET_SSO_E_ERROR
    description: "Initial | Exact match. Context |Flight access, Returning user, SSO auth, Email identifier [Error]"
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: sso
      identifier_type: email
    events:
      - success     # initiateSSOAction → SSORedirectView
      - failure     # SSORedirectView → UsernameEntryView [Error]
    final_state: {"state_id": "UsernameEntryView", "interface": "usernameEntryUI", "error_id": "AUTH_0012"}

  # ---------- EXACT → flight org • first-login sso (EmployeeID) [Error] ----
  - id: EXACT_FL_FIRST_SSO_ID_ERROR
    description: "Initial | Exact match. Context |Flight access, First login, SSO auth, EmployeeID identifier [Error]."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "yes"
      login_method: sso
      identifier_type: employeeid
    events:
      - success     # initiateSSOAction → SSORedirectView
      - failure     # SSORedirectView → UsernameEntryView [Error]
    final_state: {"state_id": "UsernameEntryView", "interface": "usernameEntryUI", "error_id": "AUTH_0012"}

  # ---------- EXACT → flight org • returning pwd (EmployeeID) [Error] ----
  - id: EXACT_FL_RET_PASS_ID_ERROR
    description: "Initial | Exact match. Context |Flight access, Returning user, Password auth, EmployeeID identifier [Error]."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: password
      identifier_type: employeeid
    events:            
      - submitPassword        # TempPasswordView → verifyPasswordAction
      - invalidPassword      # verifyPasswordAction → verifyPasswordAction
    final_state: {"state_id": "PasswordEntryView", "interface": "passwordEntryUI", "error_id": "AUTH_0005"}

  # ---------- EXACT → flight org • first-login pwd (EmployeeID) [Error] ----
  - id: EXACT_FL_FIRST_PASS_ID_ERROR
    description: "Initial | Exact match. Context |Flight access, First login, Password auth, EmployeeID identifier [Error]."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "yes"
      login_method: password
      identifier_type: employeeid
    events:
      - submitPassword        # TempPasswordView → verifyPasswordAction
      - invalidPassword      # verifyPasswordAction → verifyPasswordAction
    final_state: {"state_id": "TempPasswordEntryView", "interface": "tempPasswordEntryUI", "error_id": "AUTH_0013", "cs_contact": true}

  # ---------- EXACT → flight org • returning sso (EmployeeID) [sso Error] ----
  - id: EXACT_FL_RET_SSO_ID_ERROR
    description: "Initial | Exact match. Context |Flight access, Returning user, SSO auth, EmployeeID identifier [Error]."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: sso
      identifier_type: employeeid
    events:
      - success       # initiateSSOAction → SSORedirectView
      - failure       # SSORedirectView → UsernameEntryView [Error]
    final_state: {"state_id": "UsernameEntryView", "interface": "usernameEntryUI", "error_id": "AUTH_0012"}

  ##---------- EXACT → flight org • returning sso (EmployeeID) [sso cancel Error] ----
  - id: EXACT_FL_RET_SSO_ID_ERROR_CANCEL
    description: "Initial | Exact match. Context |Flight access, Returning user, SSO auth, EmployeeID identifier [Cancel Error]."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: sso
      identifier_type: employeeid
    events:
      - success       # initiateSSOAction → SSORedirectView
      - cancelled     # SSORedirectView → UsernameEntryView [Cancel Error]
    final_state: {"state_id": "UsernameEntryView", "interface": "usernameEntryUI", "error_id": "AUTH_0011"}

  ## ---------- EXACT → flight org • returning password (email) | forgot password ----
  - id: EXACT_FL_RET_PASS_E_FORGOT_PW
    description: "Initial | Exact match. Context |Flight access, Returning user, password auth, email identifier, forgot password"
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: password
      identifier_type: email
    events:
      - forgotPassword                      # PasswordEntryView → ForgotPasswordEmailLinkView
      - success                             # sendResetEmailAction → ForgotPasswordEmailLinkView
    final_state: {"state_id": "ForgotPasswordEmailLinkView", "interface": "forgotPasswordEmailLinkUI"}

  - id: EXACT_FL_RET_PASS_E_FORGOT_PW_RESEND_EMAIL
    description: "Initial | Exact match. Context |Flight access, Returning user, password auth, email identifier, forgot password, resend email"
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: password
      identifier_type: email
    events:
      - forgotPassword                      # PasswordEntryView → sendResetEmailAction
      - success                             # sendResetEmailAction → ForgotPasswordEmailLinkView
      - resendEmail                         # ForgotPasswordEmailLinkView → sendResetEmailAction  
      - success                             # sendResetEmailAction → ForgotPasswordEmailLinkView
    final_state: {"state_id": "ForgotPasswordEmailLinkView", "interface": "forgotPasswordEmailLinkUI"}

  - id: EXACT_FL_RET_PASS_E_FORGOT_PW_RESEND_EMAIL_ERROR
    description: "Initial | Exact match. Context | Flight access, Returning user, password auth, email identifier, forgot password, resend email, error"
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: password
      identifier_type: email
    events:
      - forgotPassword                      # PasswordEntryView → sendResetEmailAction
      - error                               # sendResetEmailAction → ForgotPasswordEmailLinkView (with error)
    final_state: {"state_id": "ForgotPasswordEmailLinkView", "interface": "forgotPasswordEmailLinkUI", "error_id": "AUTH_0009"}

  - id: EXACT_FL_RET_PASS_E_FORGOT_PW_TOKEN_LANDING_SUCCESS
    description: "User lands on UpdatePasswordView via email link, token is validated, password updated successfully."
    initial_state: UpdatePasswordView
    context: # This context reflects the user's state prior to clicking the email link
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: password
      identifier_type: email
      # Initial state for this test is effectively UpdatePasswordView, triggered by token in URL
    events:
      # Event 1: Frontend detects token, state machine is in UpdatePasswordView, processToken is dispatched
      - processToken        # UpdatePasswordView → resolvePasswordResetTokenAction
      # Event 2: Token validation is successful
      - valid               # resolvePasswordResetTokenAction → UpdatePasswordView (context: token_is_valid=true)
      # Event 3: User submits new password
      - updatePassword      # UpdatePasswordView → updatePasswordAction
      # Event 4: Password update is successful
      - success             # updatePasswordAction → LoggedInView
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

  - id: EXACT_FL_RET_PASS_E_FORGOT_PW_TOKEN_LANDING_INVALID_TOKEN
    description: "User lands on UpdatePasswordView via email link, token validation fails (invalid)."
    initial_state: UpdatePasswordView
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: password
      identifier_type: email
    events:
      - processToken        # UpdatePasswordView → resolvePasswordResetTokenAction
      - invalid             # resolvePasswordResetTokenAction → UpdatePasswordView (context: token_is_valid=false, error_id: INVALID_RESET_TOKEN)
    final_state: {"state_id": "UpdatePasswordView", "interface": "updatePasswordUI", "error_id": "AUTH_0019"}

  - id: EXACT_FL_RET_PASS_E_FORGOT_PW_TOKEN_LANDING_EXPIRED_TOKEN
    description: "User lands on UpdatePasswordView via email link, token validation fails (expired)."
    initial_state: UpdatePasswordView
    context:
      resolver_match: exact
      flight_access: "yes"
      first_login: "no"
      login_method: password
      identifier_type: email
    events:
      - processToken        # UpdatePasswordView → resolvePasswordResetTokenAction
      - expired             # resolvePasswordResetTokenAction → UpdatePasswordView (context: token_is_valid=false, error_id: EXPIRED_RESET_TOKEN)
    final_state: {"state_id": "UpdatePasswordView", "interface": "updatePasswordUI", "error_id": "AUTH_0020"}

  ###############################################################
  # ===  SECTION 2 : resolver_match == multiple               ===
  ###############################################################

  # ---------- MULTIPLE → flight org • returning pwd ----
  - id: MULTIPLE_E_THEN_EXACT_FL_RET_PASS_E
    description: "Initial | Multiple matches (Email identifier). Event: organizationSelected returns multiple; resolve again yields exact match (Flight access, Returning user, Password auth, Email identifier)."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: multiple
      identifier_type: email
    events:
      - organizationSelected    # OrganizationPickerView → resolveUsernameAction
      -
        type: exact
        context:
          resolver_match: exact
          flight_access: "yes"
          first_login: "no"
          login_method: password
          identifier_type: email
      - submitPassword       # PasswordEntryView → verifyPasswordAction
      - success               # verifyPasswordAction → LoggedInView 
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

  # ---------- MULTIPLE → flight org • first-login sso ----
  - id: MULTIPLE_E_THEN_EXACT_FL_FIRST_SSO_E
    description: "Initial | Multiple matches (Email identifier). Event: organizationSelected returns multiple; resolve again yields exact match (Flight access, First login, SSO auth, Email identifier)."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: multiple
      identifier_type: email
    events:
      - organizationSelected         # OrganizationPickerView → resolveUsernameAction
      -
        type: exact
        context:
          resolver_match: exact
          flight_access: "yes"
          first_login: "yes"
          login_method: sso
          identifier_type: email
      - success                      # initiateSSOAction → SSORedirectView → LoggedInView 
    final_state: {"state_id": "SSORedirectView", "interface": "SSORedirectUI"}

  # ---------- MULTIPLE → flight org • returning sso ----
  - id: MULTIPLE_E_THEN_EXACT_FL_RET_SSO_E
    description: "Initial | Multiple matches (Email identifier). Event: organizationSelected returns multiple; resolve again yields exact match (Flight access, Returning user, SSO auth, Email identifier)."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: multiple
      identifier_type: email
    events:
      - organizationSelected     # OrganizationPickerView → resolveUsernameAction
      -
        type: exact
        context:
          resolver_match: exact
          flight_access: "yes"
          first_login: "no"
          login_method: sso
          identifier_type: email
      - success                   # initiateSSOAction → SSORedirectView → LoggedInView  
    final_state: {"state_id": "SSORedirectView", "interface": "SSORedirectUI"}

  # ---------- MULTIPLE → flight org • first-login pwd ----
  - id: MULTIPLE_E_THEN_EXACT_FL_FIRST_PASS_E
    description: "Initial | Multiple matches (Email identifier). Event: organizationSelected returns multiple; resolve again yields exact match (Flight access, First login, Password auth, Email identifier)."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: multiple
      identifier_type: email
    events:
      - organizationSelected   # OrganizationPickerView → resolveUsernameAction
      -
        type: exact
        context:
          resolver_match: exact
          flight_access: "yes"
          first_login: "yes"
          login_method: password
          identifier_type: email
      - submitPassword     # TempPasswordView → createPasswordAction
      - success             # verifyPasswordAction → SetupPasswordView 
      - createPassword      # SetupPasswordView → createPasswordAction
      - success             # createPasswordAction → LoggedInView
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

  # ---------- MULTIPLE → flight org • first-login pwd (EmployeeID) ----
  - id: MULTIPLE_E_THEN_EXACT_FL_FIRST_PASS_ID
    description: "Initial | Multiple matches (Email identifier). Event: organizationSelected returns multiple; resolve again yields exact match (Flight access, First login, Password auth, EmployeeID identifier)."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: multiple
      identifier_type: email
    events:
      - organizationSelected
      -
        type: exact
        context:
          resolver_match: exact
          flight_access: "yes"
          first_login: "yes"
          login_method: password
          identifier_type: employeeid
      - submitPassword     # TempPasswordView → createPasswordAction
      - success             # verifyPasswordAction → SetupPasswordView 
      - createPassword      # SetupPasswordView → createPasswordAction
      - success             # createPasswordAction → LoggedInView
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

  # ---------- MULTIPLE → flight org • first-login sso (EmployeeID) ----
  - id: MULTIPLE_E_THEN_EXACT_FL_FIRST_SSO_ID
    description: "Initial | Multiple matches (Email identifier). Event: organizationSelected returns multiple; resolve again yields exact match (Flight access, First login, SSO auth, EmployeeID identifier)."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: multiple
      identifier_type: email
    events:
      - organizationSelected   # OrganizationPickerView → resolveUsernameAction
      -
        type: exact
        context:
          resolver_match: exact
          flight_access: "yes"
          first_login: "yes"
          login_method: sso
          identifier_type: employeeid
      - success             # initiateSSOAction → SSORedirectView → LoggedInView
    final_state: {"state_id": "SSORedirectView", "interface": "SSORedirectUI"}

  # ---------- MULTIPLE → flight org • returning sso (EmployeeID) ----
  - id: MULTIPLE_E_THEN_EXACT_FL_RET_SSO_ID
    description: "Initial | Multiple matches (Email identifier). Event: organizationSelected returns multiple; resolve again yields exact match (Flight access, Returning user, SSO auth, EmployeeID identifier)."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: multiple
      identifier_type: email
    events:
      - organizationSelected      # OrganizationPickerView → resolveUsernameAction
      -
        type: exact
        context:
          resolver_match: exact
          flight_access: "yes"
          first_login: "no"
          login_method: sso
          identifier_type: employeeid
      - success                 # initiateSSOAction → SSORedirectView → LoggedInView 
    final_state: {"state_id": "SSORedirectView", "interface": "SSORedirectUI"}

  # ---------- MULTIPLE → flight org • returning pwd (EmployeeID) ----
  - id: MULTIPLE_E_THEN_EXACT_FL_RET_PASS_ID
    description: "Initial | Multiple matches (Email identifier). Event: organizationSelected returns multiple; resolve again yields exact match (Flight access, Returning user, Password auth, EmployeeID identifier)."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: multiple
      identifier_type: email
    events:
      - organizationSelected
      -
        type: exact
        context:
          resolver_match: exact
          flight_access: "yes"
          first_login: "no"
          login_method: password
          identifier_type: employeeid
      - submitPassword
      - success
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

  # ------------------------------------------------------------#
  # -------------------- Error States --------------------------#
  # ------------------------------------------------------------#

    # ---------- MULTIPLE → flight org • returning pwd • Forgot Passwd----
  - id: MULTIPLE_E_THEN_EXACT_FL_RET_PASS_E_FORGOT_PW
    description: "Initial | Multiple matches (Email identifier). Event: organizationSelected returns multiple; resolve again yields exact match (Flight access, Returning user, Password auth, Email identifier), forgot password."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: multiple
      identifier_type: email
    events:
      - organizationSelected    # OrganizationPickerView → resolveUsernameAction
      -
        type: exact
        context:
          resolver_match: exact
          flight_access: "yes"
          first_login: "no"
          login_method: password
          identifier_type: email
      - submitPassword       # PasswordEntryView → verifyPasswordAction
      - invalidPassword      # verifyPasswordAction → SetupPasswordView
      - submitPassword       # PasswordEntryView → verifyPasswordAction
      - success               # verifyPasswordAction → LoggedInView 
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

  # ---------- MULTIPLE → flight org • first-login sso • Forgot Password ----
  - id: MULTIPLE_E_THEN_EXACT_FL_FIRST_SSO_E_FORGOT_PW
    description: "Initial | Multiple matches (Email identifier). Event: organizationSelected returns multiple; resolve again yields exact match (Flight access, First login, SSO auth, Email identifier), forgot password."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: multiple
      identifier_type: email
    events:
      - organizationSelected         # OrganizationPickerView → resolveUsernameAction
      -
        type: exact
        context:
          resolver_match: exact
          flight_access: "yes"
          first_login: "yes"
          login_method: sso
          identifier_type: email
      - success # initiateSSOAction → SSORedirectView
      - failure # SSORedirectView → UsernameEntryView [Error] 
    final_state: {"state_id": "UsernameEntryView", "interface": "usernameEntryUI", "error_id": "AUTH_0012"}

    # ---------- MULTIPLE → flight org • first-login sso • Cancel SSO ----
  - id: MULTIPLE_E_THEN_EXACT_FL_FIRST_SSO_E_CANCEL_SSO
    description: "Initial | Multiple matches (Email identifier). Event: organizationSelected returns multiple; resolve again yields exact match (Flight access, First login, SSO auth, Email identifier), cancel SSO."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: multiple
      identifier_type: email
    events:
      - organizationSelected         # OrganizationPickerView → resolveUsernameAction
      -
        type: exact
        context:
          resolver_match: exact
          flight_access: "yes"
          first_login: "yes"
          login_method: sso
          identifier_type: email
      - success # initiateSSOAction → SSORedirectView
      - cancelled # SSORedirectView → UsernameEntryView [Cancel Error] 
    final_state: {"state_id": "UsernameEntryView", "interface": "usernameEntryUI", "error_id": "AUTH_0011"}

  # ---------- MULTIPLE → flight org • first-login pwd (EmployeeID) ----
  - id: MULTIPLE_E_THEN_EXACT_FL_FIRST_PASS_ID
    description: "Initial | Multiple matches (Email identifier). Event: organizationSelected returns multiple; resolve again yields exact match (Flight access, First login, Password auth, EmployeeID identifier)."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: multiple
      identifier_type: email
    events:
      - organizationSelected
      -
        type: exact
        context:
          resolver_match: exact
          flight_access: "yes"
          first_login: "yes"
          login_method: password
          identifier_type: employeeid
      - submitPassword     # TempPasswordView → createPasswordAction
      - success             # verifyPasswordAction → SetupPasswordView 
      - createPassword      # SetupPasswordView → createPasswordAction
      - failure             # createPasswordAction → SetupPasswordView
    final_state: {"state_id": "SetupPasswordView", "interface": "setupPasswordUI", "error_id": "AUTH_0023"}

  # ---------- MULTIPLE → flight org • returning pwd (EmployeeID) ----
  - id: MULTIPLE_E_THEN_EXACT_FL_RET_PASS_ID
    description: "Initial | Multiple matches (Email identifier). Event: organizationSelected returns multiple; resolve again yields exact match (Flight access, Returning user, Password auth, EmployeeID identifier)."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: multiple
      identifier_type: email
    events:
      - organizationSelected
      -
        type: exact
        context:
          resolver_match: exact
          flight_access: "yes"
          first_login: "no"
          login_method: password
          identifier_type: employeeid
      - submitPassword       # PasswordEntryView → verifyPasswordAction
      - invalidPassword      # verifyPasswordAction → PasswordEntryView
    final_state: {"state_id": "PasswordEntryView", "interface": "passwordEntryUI", "error_id": "AUTH_0005"}

  ###############################################################
  # ===  SECTION 3 : resolver_match == none                   ===
  ###############################################################
  - id: NONE_FL_E_DMY_SUBMITUSER_THEN_EXACT_FL_RET_PASS_ID
    description: "Initial | No match (Flight access, Email identifier, Domain match Yes). User prompted to use EmployeeID."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    # initial ctx used only up to the first resolveUsernameAction
    context:
      resolver_match: none
      flight_access: "yes"            # we know they have flight access based on this email domain
      identifier_type: email
      domain_match: "yes"
    events:
      - organizationSelected      # EmployeeUsernamePromptView → resolveUsernameAction 
      -                              # At this point we reset our ctx object and start over
        type: exact                  # event.type =  exact | error
        context:                     # merge this into sm.ctx before branching
          resolver_match: exact
          flight_access: "yes"
          first_login: "no"
          login_method: password
          identifier_type: employeeid
      - submitPassword              # PasswordEntryView → verifyPasswordAction
      - success                      # verifyPasswordAction → LoggedInView
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

  - id: NONE_FL_E_DMY_SUBMITUSER_THEN_EXACT_FL_FIRST_PASS_ID
    description: "Initial | No match (Flight access, Email identifier, Domain match Yes). User prompted to use EmployeeID."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    # initial ctx used only up to the first resolveUsernameAction
    context:
      resolver_match: none
      flight_access: "yes"            # we know they have flight access based on this email domain
      identifier_type: email
      domain_match: "yes"
    events:
      - organizationSelected      # EmployeeUsernamePromptView → resolveUsernameAction
      -                              # At this point we reset our ctx object and start over
        type: exact                  # event.type
        context:                     # merge this into sm.ctx before branching
          resolver_match: exact
          flight_access: "yes"
          first_login: "yes"
          login_method: password
          identifier_type: employeeid
      - submitPassword        # TempPasswordView → createPasswordAction
      - success               # verifyPasswordAction → SetupPasswordView
      - createPassword        # SetupPasswordView → createPasswordAction
      - success               # createPasswordAction → LoggedInView
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

  - id: NONE_EID_NDM_SUBMITUSER_THEN_ERROR_NONE_EID_NDM
    description: "Initial | No match (EmployeeID identifier, Domain match No). Retry resolve from EmployeeIDCompanyPicker succeeds."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    # initial ctx used only up to the first resolveUsernameAction
    context:
      resolver_match: none
      identifier_type: employeeid
      domain_match: "no"
    events:
      - organizationSelected         # EmployeeUsernamePromptView → resolveUsernameAction              
      -                              # At this point we reset our ctx object and start over
        type: exact                  # event.type
        context:                     # merge this into sm.ctx before branching
          resolver_match: exact
          flight_access: "yes"
          first_login: "yes"
          login_method: password
          identifier_type: employeeid
      - submitPassword                # TempPasswordView → createPasswordAction
      - success                       # verifyPasswordAction → SetupPasswordView
      - createPassword                # SetupPasswordView → createPasswordAction
      - success                       # createPasswordAction → LoggedInView
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

  - id: NONE_NF_FIRST_PASS_E_DMY_CREATEACC_1
    description: "Initial | No match (No Flight access, Email identifier, Domain match Yes). User prompted to create an account."
    initial_state: resolver_branch
    # initial ctx used only up to the first resolveUsernameAction
    context:
      resolver_match: none
      flight_access: "no"
      identifier_type: email
      domain_match: "yes"
    events:
      - success            # sendPasswordEmailLinkAction → PasswordEmailLinkView
    final_state: {"state_id": "PasswordEmailLinkView", "interface": "passwordEmailLinkUI"}

  - id: NONE_NF_FIRST_PASS_E_DMY_CREATEACC_1_BAD_INITIAL_SEND
    description: "Initial | No match (No Flight access, Email identifier, Domain match Yes). User prompted to create an account, bad initial send"
    initial_state: resolver_branch
    # initial ctx used only up to the first resolveUsernameAction
    context:
      resolver_match: none
      flight_access: "no"
      identifier_type: email
      domain_match: "yes"
    events:
      - error            # sendPasswordEmailLinkAction → PasswordEmailLinkView [error]
    final_state: {"state_id": "PasswordEmailLinkView", "interface": "passwordEmailLinkUI", "error_id": "AUTH_0008"}

  - id: NONE_NF_FIRST_PASS_E_DMY_CREATEACC_1_RESEND
    description: "Initial | No match (No Flight access, Email identifier, Domain match Yes). User prompted to create an account, resend"
    initial_state: resolver_branch
    # initial ctx used only up to the first resolveUsernameAction
    context:
      resolver_match: none
      flight_access: "no"
      identifier_type: email
      domain_match: "yes"
    events:
      - success            # sendPasswordEmailLinkAction → PasswordEmailLinkView
      - resendEmail        # Transition from 'PasswordEmailLinkView' on 'resendEmail' → 'sendPasswordEmailLinkAction'
      - success            # 
    final_state: {"state_id": "PasswordEmailLinkView", "interface": "passwordEmailLinkUI"}

  - id: NONE_NF_FIRST_PASS_E_DMY_CREATEACC_2_TOKEN
    description: "Initial | No match (No Flight access, Email identifier, Domain match Yes). User prompted to create an account, token processing"
    initial_state: SetupPasswordView
    # initial ctx used only up to the first resolveUsernameAction
    context:
      resolver_match: none
      flight_access: "no"
      identifier_type: email
      domain_match: "yes"
    events:
      - processToken                # SetupPasswordView (frontend detects token from URL) → resolvePasswordSetupTokenAction
      - valid                       # resolvePasswordSetupTokenAction → SetupPasswordView (UI shows password fields, token is valid)
      - createPassword              # SetupPasswordView → createPasswordAction
      - success                     # createPasswordAction → LoggedInView
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

  - id: NONE_NF_FIRST_PASS_E_DMY_CREATEACC_2_TOKEN_INVALID
    description: "Initial | No match (No Flight access, Email identifier, Domain match Yes). User prompted to create an account, token processing=invalid"
    initial_state: SetupPasswordView
    # initial ctx used only up to the first resolveUsernameAction
    context:
      resolver_match: none
      flight_access: "no"
      identifier_type: email
      domain_match: "yes"
    events:
      - processToken                # SetupPasswordView (frontend detects token from URL) → resolvePasswordSetupTokenAction
      - invalid                       # resolvePasswordSetupTokenAction → SetupPasswordView (UI shows password fields, token is valid)
    final_state: {"state_id": "SetupPasswordView", "interface": "setupPasswordUI", "error_id": "AUTH_0021"}

  - id: NONE_NF_FIRST_PASS_E_DMY_CREATEACC_2_TOKEN_EXPIRED
    description: "Initial | No match (No Flight access, Email identifier, Domain match Yes). User prompted to create an account, token processing=expired"
    initial_state: SetupPasswordView
    # initial ctx used only up to the first resolveUsernameAction
    context:
      resolver_match: none
      flight_access: "no"
      identifier_type: email
      domain_match: "yes"
    events:
      - processToken                # SetupPasswordView (frontend detects token from URL) → resolvePasswordSetupTokenAction
      - expired                     # resolvePasswordSetupTokenAction → SetupPasswordView (UI shows password fields, token is valid)
    final_state: {"state_id": "SetupPasswordView", "interface": "setupPasswordUI", "error_id": "AUTH_0022"}

  # ------------------------------------------------------------#
  # -------------------- Error States --------------------------#
  # ------------------------------------------------------------#
  - id: NONE_FL_E_DMY_SUBMITUSER_THEN_ERROR_NONE_FL_E_DMY
    description: "Initial | No match (Flight access, Email identifier, Domain match Yes). Retry resolve fails, user stays on prompt with error."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    # initial ctx used only up to the first resolveUsernameAction
    context:
      resolver_match: none
      flight_access: "yes"
      identifier_type: email
      domain_match: "yes"
    events:
      - organizationSelected      # EmployeeUsernamePromptView → resolveUsernameAction
      - error                     # resolveUsernameAction → OrganizationPickerView
    final_state: {"state_id": "OrganizationPickerView", "interface": "organizationPickerUI", "error_id": "AUTH_0015"}

  - id: NONE_NF_FIRST_PASS_E_DMY_CREATEACC_ERROR
    description: "Initial | No match (Flight access, Email identifier, Domain match Yes). Retry resolve fails, user stays on prompt with error."
    initial_state: SetupPasswordView
    # initial ctx used only up to the first resolveUsernameAction
    context:
      resolver_match: none
      flight_access: "no"
      identifier_type: email
      domain_match: "yes"
    events:
      - processToken                # SetupPasswordView (frontend detects token from URL) → resolvePasswordSetupTokenAction
      - valid                       # resolvePasswordSetupTokenAction → SetupPasswordView (UI shows password fields, token is valid)
      - createPassword              # SetupPasswordView → createPasswordAction
      - failure                     # createPasswordAction → SetupPasswordView
    final_state: {"state_id": "SetupPasswordView", "interface": "setupPasswordUI", "error_id": "AUTH_0023"}

  - id: BAD_USERNAME_EMAIL
    description: "Initial | No match (No Flight access, Email identifier, Domain match No). User does not proceed."
    initial_state: resolver_branch
    # initial ctx used only up to the first resolveUsernameAction
    context:
      resolver_match: none
      flight_access: "no"
      identifier_type: email
      domain_match: "no"  # this switch should only matten when resolver_match=none
      came_from_org_picker: "false"
    events: []
    final_state:
      state_id: UsernameEntryView
      interface: usernameEntryUI
      error_id: AUTH_0004

  - id: BAD_USERNAME_EMPLOYEE_ID
    description: "Initial | No match (No Flight access, Employee ID identifier, Domain match No). User does not proceed."
    initial_state: resolver_branch
    # initial ctx used only up to the first resolveUsernameAction
    context:
      resolver_match: none
      flight_access: "no"
      identifier_type: employeeid
      domain_match: "no"  # this switch should only matten when resolver_match=none
      came_from_org_picker: "false"
    events:
      - organizationSelected    # OrganizationPickerView → resolveUsernameAction
      -
        type: exact
        context:
          resolver_match: none
          domain_match: "no"
          flight_access: "no"
          first_login: "yes"
          login_method: password
          identifier_type: employeeid
          came_from_org_picker: "true"
    final_state:
      state_id: OrganizationPickerView
      interface: organizationPickerUI
      error_id: AUTH_0030

  - id: MULTIPLE_E_THEN_EXACT_FL_RET_PASS_E_FORGOT_PW_NONE_REMATCH
    description: "Initial | Multiple matches (Email identifier). Event: organizationSelected returns multiple; resolve again yields exact match (Flight access, Returning user, Password auth, Email identifier), none rematch."
    initial_state: resolver_branch # this defaults to resolver_branch when blank
    context:
      resolver_match: multiple
      identifier_type: email
    events:
      - organizationSelected    # OrganizationPickerView → resolveUsernameAction
      -
        type: exact
        context:
          resolver_match: none
          domain_match: "no"
          flight_access: "no"
          first_login: "yes"
          login_method: password
          identifier_type: email
          came_from_org_picker: "true"
    final_state: {"state_id": "OrganizationPickerView", "interface": "organizationPickerUI", "error_id": "AUTH_0030"}

  ###############################################################
  # ===  SECTION 4 : Name Deduplication                       ===
  ###############################################################

  - id: MULTIPLE_ID_DEDUP_SUCCESS_RET_PASS
    description: "Multiple ID match -> Org Picker -> Still multiple -> Name Deduplication -> Success -> Returning PWD flow"
    initial_state: resolver_branch
    context:
      resolver_match: multiple
      identifier_type: employeeid
    events:
      # Event 1: User is at OrganizationPickerView and selects a company.
      # This triggers resolveUsernameAction. (Frontend will mark came_from_org_picker=true in the next event.)
      - organizationSelected
      # Event 2: The second resolve still finds multiple matches.
      # This event simulates that outcome. The machine should go to NameDeduplicationView.
      - type: multiple
        context:
          resolver_match: multiple
          came_from_org_picker: "true"
      # Event 3: User is at NameDeduplicationView and submits their name.
      # This triggers deduplicateNameAction.
      - submitName
      # Event 4: The name submission is successful, finding an exact match.
      # Context is updated to reflect a returning user with flight access & password.
      - type: exact
        context:
          resolver_match: exact
          flight_access: "yes"
          first_login: "no"
          login_method: password
          identifier_type: employeeid
      # Event 5: Now in PasswordEntryView, user submits password.
      - submitPassword
      # Event 6: Verification is successful, user is logged in.
      - success
    final_state: {"state_id": "LoggedInView", "interface": "loggedInUI"}

  - id: MULTIPLE_ID_DEDUP_FAILURE
    description: "Multiple ID match -> Org Picker -> Still multiple -> Name Deduplication -> Failure"
    initial_state: resolver_branch
    context:
      resolver_match: multiple
      identifier_type: employeeid
    events:
      # Event 1: User selects a company from the picker.
      - organizationSelected
      # Event 2: The second resolve still finds multiple matches.
      - type: multiple
        context:
          resolver_match: multiple
          came_from_org_picker: "true"
      # Event 3: User submits their name for deduplication.
      - submitName
      # Event 4: The name submission fails to find a unique record.
      # The machine should return to NameDeduplicationView with an error.
      - none
    final_state: {"state_id": "NameDeduplicationView", "interface": "nameDeduplicationUI", "error_id": "AUTH_0017"}